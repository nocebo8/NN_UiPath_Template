name: UiPath XAML Validate (Hosted)

on:
  pull_request:
  push:

jobs:
  xaml_validate:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Static checks (project.json and referenced workflows)
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          $root = Join-Path $PWD 'Golden_Template'
          if (-not (Test-Path $root)) { Write-Host "Golden_Template folder not found"; exit 1 }
          $issues = @()
          # Check project.json main exists
          $projPath = Join-Path $root 'project.json'
          if (-not (Test-Path $projPath)) { $issues += "Missing project.json at $projPath" }
          else {
            try {
              $proj = Get-Content -LiteralPath $projPath -Raw | ConvertFrom-Json
              $mainRel = $proj.main
              if ([string]::IsNullOrWhiteSpace($mainRel)) { $issues += "project.json: 'main' is empty" }
              else {
                $mainAbs = Join-Path $root $mainRel
                if (-not (Test-Path $mainAbs)) { $issues += "project.json: main not found -> $mainRel" }
              }
            } catch {
              $issues += "project.json is not valid JSON: $($_.Exception.Message)"
            }
          }
          # Check all ui:InvokeWorkflowFile WorkflowFileName targets exist (relative to project root)
          $xamls = Get-ChildItem -Path $root -Recurse -Filter *.xaml
          foreach ($xf in $xamls) {
            $text = Get-Content -LiteralPath $xf.FullName -Raw
            $regex = '<ui:InvokeWorkflowFile[\s\S]*?WorkflowFileName="([^"]+?)"'
            $matches = [System.Text.RegularExpressions.Regex]::Matches($text, $regex)
            foreach ($m in $matches) {
              $ref = $m.Groups[1].Value
              $target = Join-Path $root $ref
              if (-not (Test-Path $target)) { $issues += "Missing workflow target '$ref' referenced in '$($xf.FullName)'" }
            }
          }
          # Check basic assets/config presence
          $cfg = Join-Path $root 'Data/Config.xlsx'
          if (-not (Test-Path $cfg)) { $issues += "Missing Data/Config.xlsx" }
          # Emit log and decide
          $log = "static_checks.log"
          if ($issues.Count -gt 0) {
            $issues | Out-String | Tee-Object $log | Out-Null
            Write-Host "Static checks found $($issues.Count) issue(s)"; exit 1
          } else {
            'Static checks passed.' | Tee-Object $log | Out-Null
          }

      - name: Validate InvokeWorkflowFile arguments vs callee
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          $root = Join-Path $PWD 'Golden_Template'
          $issues = @()
          $warnings = @()
          $xamls = Get-ChildItem -Path $root -Recurse -Filter *.xaml
          foreach ($caller in $xamls) {
            $text = Get-Content -LiteralPath $caller.FullName -Raw
            $pattern = '<ui:InvokeWorkflowFile[^>]*WorkflowFileName="([^"]+)"[\s\S]*?>[\s\S]*?</ui:InvokeWorkflowFile>'
            $invokes = [System.Text.RegularExpressions.Regex]::Matches($text, $pattern, [System.Text.RegularExpressions.RegexOptions]::Singleline)
            foreach ($m in $invokes) {
              $ref = $m.Groups[1].Value
              $inner = $m.Value
              $argKeys = @()
              $argMatches = [System.Text.RegularExpressions.Regex]::Matches($inner, 'x:Key="([^"]+)"')
              foreach ($am in $argMatches) { $argKeys += $am.Groups[1].Value }
              $calleePath = Join-Path $root $ref
              if (-not (Test-Path $calleePath)) { continue }
              try {
                [xml]$calleeXml = Get-Content -LiteralPath $calleePath -Raw
                $nsMgr = New-Object System.Xml.XmlNamespaceManager($calleeXml.NameTable)
                $nsMgr.AddNamespace('x','http://schemas.microsoft.com/winfx/2006/xaml')
                $declNodes = $calleeXml.SelectNodes('//*[local-name()="Members"]/*[local-name()="Property"]')
                $declNames = @()
                foreach ($n in $declNodes) { $declNames += $n.Attributes['Name'].Value }
                # extras provided but not declared
                $extras = $argKeys | Where-Object { $_ -and ($declNames -notcontains $_) } | Select-Object -Unique
                if ($extras.Count -gt 0) { $issues += "${($caller.FullName)} -> '$ref': unknown argument(s): ${($extras -join ', ')}" }
                # warn on missing inputs
                $missing = $declNames | Where-Object { ($argKeys -notcontains $_) -and ($_.StartsWith('in_') -or $_.StartsWith('io_')) }
                if ($missing.Count -gt 0) { $warnings += "${($caller.FullName)} -> '$ref': missing argument(s): ${($missing -join ', ')}" }
              } catch {
                $warnings += "Failed to parse callee '$ref' for ${($caller.FullName)}: $($_.Exception.Message)"
              }
            }
          }
          $out = 'invoke_args_check.log'
          if ($warnings.Count -gt 0) { ($warnings -join "`n") | Out-File -FilePath $out -Encoding UTF8 -Append }
          if ($issues.Count -gt 0) { ($issues -join "`n") | Out-File -FilePath $out -Encoding UTF8 -Append; Write-Host "Invoke argument validation FAILED"; exit 1 }
          else { 'Invoke argument validation passed.' | Out-File -FilePath $out -Encoding UTF8 }

      - name: Validate XAML structure (well-formed XML)
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          $errors = @()
          $root = Join-Path $PWD 'Golden_Template'
          if (-not (Test-Path $root)) { Write-Host "Golden_Template folder not found"; exit 1 }
          Get-ChildItem -Path $root -Recurse -Filter *.xaml | ForEach-Object {
            $f = $_.FullName
            try {
              $xml = Get-Content -LiteralPath $f -Raw
              [xml]$doc = $xml
              if (-not $doc.DocumentElement) { throw "Missing root element" }
              Write-Host "OK  $f"
            } catch {
              Write-Host ("ERR {0} - {1}" -f $f, $_.Exception.Message)
              $msg = $_.Exception.Message
              $errors += [PSCustomObject]@{ File=$f; Error=$msg }
            }
          }
          $out = "xaml_validate.log"
          if ($errors.Count -gt 0) {
            $errors | Format-Table -AutoSize | Out-String | Tee-Object $out | Out-Null
            Write-Host "Validation found $($errors.Count) error(s)"; exit 0
          } else {
            'All XAML files are well-formed XML.' | Tee-Object $out | Out-Null
          }

      - name: Upload validation log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xaml-validate-log
          path: |
            xaml_validate.log
            static_checks.log
            invoke_args_check.log

      - name: Pseudo-pack (zip project as .nupkg)
        if: always()
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          $outDir = Join-Path $PWD 'dist'
          New-Item -ItemType Directory -Path $outDir -Force | Out-Null
          $pkgName = "Golden_Template.1.0.${{ github.run_number }}.nupkg"
          $zipPath = Join-Path $outDir $pkgName
          if (Test-Path $zipPath) { Remove-Item $zipPath -Force }
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          [System.IO.Compression.ZipFile]::CreateFromDirectory((Join-Path $PWD 'Golden_Template'), $zipPath)
          Write-Host "Created pseudo package: $zipPath"

      - name: Upload pseudo package
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: uipath-pseudo-nupkg
          path: dist/*.nupkg

